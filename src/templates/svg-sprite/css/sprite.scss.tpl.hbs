@use '../../mixins/sprite-mixins';

$_svgsprite-url: '{{{stylesheetSpriteUrl}}}{{{sprite}}}';
$_svgsprite-height: {{spriteHeight}}px;
$_svgsprite-width: {{spriteWidth}}px;
$_svgsprite-size: $_svgsprite-width $_svgsprite-height;

{{#shapes}}
$_svgsprite-{{base}}-x: {{position.absolute.x}}px;
$_svgsprite-{{base}}-y: {{position.absolute.y}}px;
$svgsprite-{{base}}-width: {{width.outer}}px;
$svgsprite-{{base}}-height: {{height.outer}}px;
$svgsprite-{{base}}: $_svgsprite-url $_svgsprite-{{base}}-x $_svgsprite-{{base}}-y $svgsprite-{{base}}-width $svgsprite-{{base}}-height $_svgsprite-size;

{{/shapes}}

@mixin {{mixinName}}($sprite) {
{{!--    //@include sprite-mixins.sprite($sprite, $-svgsprite-url<% if (options.pixelRatio !== 1) { %>, $-<%= spriteName %>-size<% } %>);--}}
    @include sprite-mixins.sprite($sprite);

    // Uncomment to use private mixins instead of external sprite functions/mixins
    // @include _{{mixinName}}-image;<% if (options.pixelRatio !== 1) { %>
    // @include _{{mixinName}}-size;<% } %>
    // @include _{{mixinName}}-position($sprite);
    // @include _{{mixinName}}-width($sprite);
    // @include _{{mixinName}}-height($sprite);
}
@mixin _{{mixinName}}-image {
    background-image: url("#{$_svgsprite-url}");
    background-repeat: no-repeat;
}
// TODO: is pixelRatio available in the svgsprite generator?
// <% if (options.pixelRatio !== 1) { %>
//@mixin _{{mixinName}}-size {
//    background-size: #{$_svgsprite-size};
//}<% } %>
@mixin _{{mixinName}}-position($sprite) {
    @if $sprite and length($sprite) > 2 {
        background-position: nth($sprite, 2) nth($sprite, 3);
    }
}
@mixin _{{mixinName}}-width($sprite) {
    @if $sprite and length($sprite) > 3 {
        width: nth($sprite, 4);
    }
}
@mixin _{{mixinName}}-height($sprite) {
    @if $sprite and length($sprite) > 4 {
        height: nth($sprite, 5);
    }
}
@mixin {{mixinName}}-utilities {
    {{#hasMixin}}{{#hasCommon}}.{{commonName}} {
        @include _{{mixinName}}-image;
    }
    {{/hasCommon}}{{/hasMixin}}{{^hasMixin}}{{#hasCommon}}.{{/hasCommon}}{{^hasCommon}}%{{/hasCommon}}{{commonName}} {
        background-image: url("{{{stylesheetSpriteUrl}}}{{{sprite}}}");
        background-repeat: no-repeat;
    }
    {{/hasMixin}}

{{#shapes}}
    {{#selector.shape}}{{expression}}{{^last}},
    {{/last}}{{/selector.shape}} {
        @include sprite-mixins.sprite($svgsprite-{{base}});

        // Uncomment to use private mixins instead of external sprite functions/mixins
        // @include _{{mixinName}}-image;<% if (options.pixelRatio !== 1) { %>
        // @include _{{mixinName}}-size;<% } %>
        // @include _{{mixinName}}-position($svgsprite-{{base}});
        // @include _{{mixinName}}-width($svgsprite-{{base}});
        // @include _{{mixinName}}-height($svgsprite-{{base}});
    }
    {{#dimensions.extra}}

    {{#selector.dimensions}}{{expression}}{{^last}},
    {{/last}}{{/selector.dimensions}} {
        @include sprite-mixins.sprite-width($svgsprite-{{base}});
        @include sprite-mixins.sprite-height($svgsprite-{{base}});

        // Uncomment to use private mixins instead of external sprite functions/mixins
        // @include _{{mixinName}}-width($svgsprite-{{base}});
        // @include _{{mixinName}}-height($svgsprite-{{base}});
    }{{/dimensions.extra}}

{{/shapes}}
}

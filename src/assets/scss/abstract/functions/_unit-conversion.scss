@use 'sass:math';

$base-font-size : 20px; // 16px;

@function _unit($unitlessValue, $unit) {
  $value : $unitlessValue;
  @if unitless($unitlessValue) {
    $value : $unitlessValue * $unit;
  }
  @return $value;
}

@function stripUnit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

@function _convert($size, $baseSize : $base-font-size, $unit: 'px', $targetUnit: 'rem') {
  @if type-of($size) == 'number' {
    $unitlessSize: stripUnit($size);
    $unitlessBaseSize: stripUnit($baseSize);

    $faktorPxToPt: 0.75;    // 1px = 0.75pt
    $faktorPtToPx: 1.3333;  // 1pt = 1.3333px
    $faktorNewBase: math.div($unitlessSize, $unitlessBaseSize);

    $calcBaseToPx: $unitlessSize * $unitlessBaseSize;
    $calcBaseToPt: $calcBaseToPx * $faktorPxToPt;

    // em / rem to ...
    @if $unit == em or $unit == rem {
      // em / rem
      @if $targetUnit == em or $targetUnit == rem {
        @return $faktorNewBase * $unitlessBaseSize;
      }
      // percent
      @else if $targetUnit == percent {
        @return $unitlessSize * 100;
      }
      // pt
      @else if $targetUnit == pt {
        @return $calcBaseToPt;
      }
      // px
      @else if $targetUnit == px {
        @return $calcBaseToPx;
      }
    }

    // percent to ...
    @else if $unit == percent {
      // em / rem
      @if $targetUnit == em or $targetUnit == rem {
        @return math.div($unitlessSize, 100);
      }
      // pt
      @else if $targetUnit == pt {
        @return math.div($calcBaseToPx, 100)  * $faktorPxToPt;
      }
      // px
      @else if $targetUnit == px {
        @return math.div($calcBaseToPx, 100);
      }
    }

    // pt to ...
    @else if $unit == pt {
      // em / rem
      @if $targetUnit == em or $targetUnit == rem {
        @return math.div($faktorNewBase, $faktorPxToPt);
      }
      // percent
      @else if $targetUnit == percent {
        @return math.div($faktorNewBase, $faktorPxToPt) * 100;
      }
      // px
      @else if $targetUnit == px {
        @return $unitlessSize * $faktorPtToPx;
      }
    }

    // px to ...
    @else if $unit == px {
      // em / rem
      @if $targetUnit == em or $targetUnit == rem {
        @return $faktorNewBase;
      }
      // percent
      @else if $targetUnit == percent {
        @return $faktorNewBase * 100;
      }
      // pt
      @else if $targetUnit == pt {
        @return $unitlessSize * $faktorPxToPt;
      }
    }
  }

  @debug 'not yet implemented! #{$unit} to #{$targetUnit}';
  @return null;
}


// --- em functions ---

@function em($unitlessValue) {
  @return _unit($unitlessValue, 1em);
}

@function em-to-percent($emSize, $contextSize : $base-font-size) {
  @return percent(_convert($emSize, $contextSize, em, percent));
}

@function em-to-pt($emSize, $rootFontSize : $base-font-size) {
  @return pt(_convert($emSize, $rootFontSize, em, pt));
}

@function em-to-px($emSize, $rootFontSize : $base-font-size) {
  @return px(_convert($emSize, $rootFontSize, em, px));
}

@function em-to-rem($emSize, $contextSize : $base-font-size) {
  @return rem(_convert($emSize, $contextSize, em, rem));
}


// --- percent functions ---

@function percent($unitlessValue) {
  @return _unit($unitlessValue, 1%);
}

@function percent-to-em($percentSize, $contextSize : $base-font-size) {
  @return em(_convert($percentSize, $contextSize, percent, em));
}

@function percent-to-pt($percentSize, $rootFontSize : $base-font-size) {
  @return pt(_convert($percentSize, $rootFontSize, percent, pt));
}

@function percent-to-px($percentSize, $contextSize : $base-font-size) {
  @return px(_convert($percentSize, $contextSize, percent, px));
}

@function percent-to-rem($percentSize, $rootFontSize : $base-font-size) {
  @return rem(_convert($percentSize, $rootFontSize, percent, rem));
}


// --- pt functions ---

@function pt($unitlessValue) {
  @return _unit($unitlessValue, 1pt);
}

@function pt-to-em($ptSize, $contextSize : $base-font-size) {
  @return em(_convert($ptSize, $contextSize, pt, em));
}

@function pt-to-percent($ptSize, $contextSize : $base-font-size) {
  @return percent(_convert($ptSize, $contextSize, pt, percent));
}

@function pt-to-px($ptSize, $rootFontSize : $base-font-size) {
  @return px(_convert($ptSize, $rootFontSize, pt, px));
}

@function pt-to-rem($ptSize, $rootFontSize : $base-font-size) {
  @return rem(_convert($ptSize, $rootFontSize, pt, rem));
}


// --- px functions ---

@function px($unitlessValue) {
  @return _unit($unitlessValue, 1px);
}

@function px-to-em($pxSize, $contextSize : $base-font-size) {
  @return em(_convert($pxSize, $contextSize, px, em));
}

@function px-to-percent($pxSize, $contextSize : $base-font-size) {
  @return percent(_convert($pxSize, $contextSize, px, percent));
}

@function px-to-pt($pxSize, $rootFontSize : $base-font-size) {
  @return pt(_convert($pxSize, $rootFontSize, px, pt));
}

@function px-to-rem($pxSize, $rootFontSize : $base-font-size) {
  @return rem(_convert($pxSize, $rootFontSize, px, rem));
}


// --- rem functions ---

@function rem($unitlessValue) {
  @return _unit($unitlessValue, 1rem);
}

@function rem-to-em($remSize, $contextSize : $base-font-size) {
  @return em(_convert($remSize, $contextSize, rem, em));
}

@function rem-to-percent($remSize, $contextSize : $base-font-size) {
  @return percent(_convert($remSize, $contextSize, rem, percent));
}

@function rem-to-pt($remSize, $rootFontSize : $base-font-size) {
  @return pt(_convert($remSize, $rootFontSize, rem, pt));
}

@function rem-to-px($remSize, $rootFontSize : $base-font-size) {
  @return px(_convert($remSize, $rootFontSize, rem, px));
}

@function testConversion() {
  @debug '--- start conversion test ---';
  @debug '18em : ' + em(18);
  @debug '18em-to-% : ' + em-to-percent(18em);
  @debug '18em-to-pt : ' + em-to-pt(18em);
  @debug '18em-to-px : ' + em-to-px(18em);
  @debug '18em-to-rem : ' + em-to-rem(18em);
  @debug '---';
  @debug '18percent : ' + percent(18);
  @debug '18%-to-em : ' + percent-to-em(18%);
  @debug '18%-to-pt : ' + percent-to-pt(18%);
  @debug '18%-to-px : ' + percent-to-px(18%);
  @debug '18%-to-rem : ' + percent-to-rem(18%);
  @debug '---';
  @debug '18pt : ' + pt(18);
  @debug '18pt-to-em : ' + pt-to-em(18pt);
  @debug '18pt-to-% : ' + pt-to-percent(18pt);
  @debug '18pt-to-px : ' + pt-to-px(18pt);
  @debug '18pt-to-rem : ' + pt-to-rem(18pt);
  @debug '---';
  @debug '18px : ' + px(18);
  @debug '18px-to-em : ' + px-to-em(18px);
  @debug '18px-to-% : ' + px-to-percent(18px);
  @debug '18px-to-pt : ' + px-to-pt(18px);
  @debug '18px-to-rem : ' + px-to-rem(18px);
  @debug '---';
  @debug '18rem : ' + rem(18);
  @debug '18rem-to-em : ' + rem-to-em(18rem);
  @debug '18rem-to-% : ' + rem-to-percent(18rem);
  @debug '18rem-to-pt : ' + rem-to-pt(18rem);
  @debug '18rem-to-px : ' + rem-to-px(18rem);
  @debug '--- end conversion test ---';

  @return null;
}

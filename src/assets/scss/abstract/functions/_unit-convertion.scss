@use 'sass:math';

$base-font-size : 20px;

@function _unit($unitlessValue, $unit) {
  $value : $unitlessValue;
  @if unitless($unitlessValue) {
    $value : $unitlessValue * $unit;
  }
  @return $value;
}

@function _calcSizeFactor($pxSize, $contextFontSize : $base-font-size) {
  $pxSize : stripUnit($pxSize);
  $contextSize : stripUnit($contextFontSize);
  @return math.div($pxSize, $contextSize);
}

@function stripUnit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }
  @return $number;
}

@function _convert($size, $baseSize : $base-font-size, $unit: 'px', $targetUnit: 'rem') {
  @if type-of($size) == 'number' {
    @if $unit == $targetUnit {
      @return $size;
    }

    $unitlessSize: stripUnit($size);
    $unitlessBaseSize: stripUnit($baseSize);

    $faktorPxToPt: 0.75292857248934;  // 1px = 0.75292857248934pt
    $faktorPtToPx: 1.3281472327365;   // 1pt = 1.3281472327365px
    $faktorNewBase: math.div($unitlessSize, $unitlessBaseSize);

    $calcBaseToPx: $unitlessSize * $unitlessBaseSize;
    $calcBaseToPt: $calcBaseToPx * $faktorPxToPt;

    @if $unit == em {
      @if $targetUnit == percent {
        @return $unitlessSize;
      }
      @else if $targetUnit == pt {
        @return $calcBaseToPt;
      }
      @else if $targetUnit == px {
        @return $calcBaseToPx;
      }
      @else if $targetUnit == rem {
        @return $faktorNewBase;
      }
    }
    @else if $unit == percent {
      @if $targetUnit == em {
        @return math.div($unitlessSize, 100);
      }
      @else if $targetUnit == pt {
        @return math.div($calcBaseToPx, 100)  * $faktorPxToPt;
      }
      @else if $targetUnit == px {
        @return math.div($calcBaseToPx, 100);
      }
      @else if $targetUnit == rem {
        @return math.div($unitlessSize, 100);
      }
    }
    @else if $unit == pt {
      @if $targetUnit == em {
        @return $faktorNewBase * $faktorPxToPt;
      }
      @else if $targetUnit == percent {
        @return $faktorNewBase * $faktorPxToPt;
      }
      @else if $targetUnit == px {
        @return $unitlessSize * $faktorPtToPx;
      }
      @else if $targetUnit == rem {
        @return $faktorNewBase * $faktorPxToPt;
      }
    }
    @else if $unit == px {
      @if $targetUnit == em {
        @return $faktorNewBase;
      }
      @else if $targetUnit == percent {
        @return $faktorNewBase;
      }
      @else if $targetUnit == pt {
        @return $unitlessSize * $faktorPxToPt;
      }
      @else if $targetUnit == rem {
        @return $faktorNewBase;
      }
    }
    @else if $unit == rem {
      @if $targetUnit == em {
        @return $faktorNewBase;
      }
      @else if $targetUnit == percent {
        @return $unitlessSize;
      }
      @else if $targetUnit == pt {
        @return $calcBaseToPt;
      }
      @else if $targetUnit == px {
        @return $calcBaseToPx;
      }
    }
  }

  @debug 'not yet implemented! #{$unit} to #{$targetUnit}';
  @return null;
}


// --- em functions ---

@function em($unitlessValue) {
  @return _unit($unitlessValue, 1em);
}

@function em-to-percent($emSize, $contextSize : $base-font-size) {
  @return percent(_convert($emSize, $contextSize, em, percent));
}

@function em-to-pt($emSize, $rootFontSize : $base-font-size) {
  @return pt(_convert($emSize, $rootFontSize, em, pt));
}

@function em-to-px($emSize, $rootFontSize : $base-font-size) {
  @return px(_convert($emSize, $rootFontSize, em, px));
}

@function em-to-rem($emSize, $contextSize : $base-font-size) {
  @return rem(_convert($emSize, $contextSize, em, rem));
}


// --- percent functions ---

@function percent($unitlessValue) {
  @return _unit($unitlessValue, 100%);
}

@function percent-to-em($percentSize, $contextSize : $base-font-size) {
  @return em(_convert($percentSize, $contextSize, percent, em));
}

@function percent-to-pt($percentSize, $rootFontSize : $base-font-size) {
  @return pt(_convert($percentSize, $rootFontSize, percent, pt));
}

@function percent-to-px($percentSize, $contextSize : $base-font-size) {
  @return px(_convert($percentSize, $contextSize, percent, px));
}

@function percent-to-rem($percentSize, $rootFontSize : $base-font-size) {
  @return rem(_convert($percentSize, $rootFontSize, percent, rem));
}


// --- pt functions ---

@function pt($unitlessValue) {
  @return _unit($unitlessValue, 1pt);
}

@function pt-to-em($ptSize, $contextSize : $base-font-size) {
  @return em(_convert($ptSize, $contextSize, pt, em));
}

@function pt-to-percent($ptSize, $contextSize : $base-font-size) {
  @return percent(_convert($ptSize, $contextSize, pt, percent));
}

@function pt-to-px($ptSize, $rootFontSize : $base-font-size) {
  @return px(_convert($ptSize, $rootFontSize, pt, px));
}

@function pt-to-rem($ptSize, $rootFontSize : $base-font-size) {
  @return rem(_convert($ptSize, $rootFontSize, pt, rem));
}


// --- px functions ---

@function px($unitlessValue) {
  @return _unit($unitlessValue, 1px);
}

@function px-to-em($pxSize, $contextSize : $base-font-size) {
  @return em(_convert($pxSize, $contextSize, em, px));
}

@function px-to-percent($pxSize, $contextSize : $base-font-size) {
  @return percent(_convert($pxSize, $contextSize, em, percent));
}

@function px-to-pt($pxSize, $rootFontSize : $base-font-size) {
  @return pt(_convert($pxSize, $rootFontSize, em, pt));
}

@function px-to-rem($pxSize, $rootFontSize : $base-font-size) {
  @return rem(_convert($pxSize, $rootFontSize, em, rem));
}


// --- rem functions ---

@function rem($unitlessValue) {
  @return _unit($unitlessValue, 1rem);
}

@function rem-to-em($remSize, $contextSize : $base-font-size) {
  @return em(_convert($remSize, $contextSize, rem, em));
}

@function rem-to-percent($remSize, $contextSize : $base-font-size) {
  @return percent(_convert($remSize, $contextSize, rem, percent));
}

@function rem-to-pt($remSize, $rootFontSize : $base-font-size) {
  @return pt(_convert($remSize, $rootFontSize, rem, pt));
}

@function rem-to-px($remSize, $rootFontSize : $base-font-size) {
  @return px(_convert($remSize, $rootFontSize, rem, px));
}
